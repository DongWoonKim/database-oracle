** 데이터베이스를 위한 데이터를 저장한 데이터 사전
- 데이터 사전?
오라클 데이터베이스 테이블은 사용자 테이블(user table)과 데이터 사전(data dictionary)으로 나뉜다.
사용자 테이블은 데이터베이스를 통해 관리할 데이터를 저장하는 테이블을 뜻한다.
여러 sql문에서 활용한 emp, dept, salgrade 테이블이 바로 사용자 테이블이다.
데이터 사전은 데이터베이스를 구성하고 운영하는 데 필용한, 모든 정보를 저장하는 특수한 테이블로 데이터베이스가 생성되는 시점에 자동으로 만들어진다.

데이터 사전에는 데이터베이스 메모리/성능/사용자/권한/객체 등 오라클 데이터베이스 운영에 중요한 데이터가 보관되어 있다. 만약 이 데이터베이스에 문제가 발생한다면 오라클 데이터베이스 사용이 불가능해질 수도 있다.

따라서 오라클 데이터베이스는 사용자가 데이터 사전 정보에 접근하거나 작업하는 것을 허용하지 않는다.
그 대신 데이터 사전 뷰 (Data Dictionary View)를 제공하여 select문으로 정보를 열람할 수 있게 해 두었다.

- 데이터 사전 뷰는 용도에 따라 이름 앞에 다음과 같은 접두어를 지정하여 분류한다.

user_xxxx : 현재 데이터베이스에 접속한 사용자가 소유한 객체 정보
all_xxxx    : 현재 데이터베이스에 접속한 사용자가 소유한 객체 또는 다른 사용자가 소유한 객체 중 사용 허가를 받은 객체, 즉 사용 가능한 모든 객체 정보
dba_xxxx : 데이터베이스 관리를 위한 정보(데이터베이스 관리 권한을 가진 system, sys 사용자만 열람 가능)
v$_xxxx : 데이터베이스 성능 관련 정보

==================================================
사용 가능한 데이터 사전을 알고 싶다면 DICT를 조회합니다.
종류가 꽤 많으므로 자주 사용하는 몇 개 정도만 알아두고 그 밖의 것들은 필요할 때 찾아서 사용하면 된다.

-> SELECT * FROM DICT
-> SELECT * FROM DICTIONARY;

- USER_접두어 를 가진 데이터 사전
USER_ 접두어로 시작하는 이름의 데이터 사전에는 현재 오라클에 접속해 있는 사용자가 소유한 객체 정보가 보관되어 있다.
** SCOTT 계정이 가지고 있는 객체 정보 살펴보기
SELECT TABLE_NAME FROM USER_TABLES;

- ALL_ 접두어를 가진 데이터 사전
ALL_접두어를 가진 데이터 사전은 오라클 데이터베이스에 접속해 있는 사용자가 소유한 객체 및 다른 사용자가 소유한 객체 중 사용이 허락되어 있는 객체 정보를 가지고 있다. 즉 SCOTT 계정으로 접속하여 ALL_TABLES를 조회하면 SCOTT 계정이 사용할 수 있는 테이블 정보를 모두 보여준다.
ALL_접두어의 데이터 사전 역시 뒤에 객체를 명시할 때 복수형 단어를 사용한다.

** SCOTT 계정이 사용할 수 있는 객체 정보 살펴보기
SELECT OWNER, TABLE_NAME FROM ALL_TABLES;

ALL_TABLES에는 USER_TABLES와 달리 OWNER열이 하나가 더 있다.
이 열은 테이블을 소유한 사용자를 명시한다.
앞장에서 사용한 DUAL 테이블은 오라클 관리 계정 SYS 소유이고 SCOTT계정은 이 테이블의 사용을 허가 받는 것이다.
OWNER 열 이외의 열은 USER_TABLES, ALL_TABLES 모두 동일한 열 구조를 가진다.

다음은 USER_TABLES의 열 일부이다.

OWNER VARCHAR2(30) NOT NULL 테이블 소유한 사용자(ALL_TABLES에만 존재)

TABLE_NAME VARCHAR(30) NOT NULL 테이블 이름

TABLESPACE_NAME VARCHAR(40) 테이블 스페이스 이름

NUM_ROWS NUMBER 테이블에 저장된 행 수

** DBA_접두어를 가진 데이터 사전
DBA_접두어를 가진 데이터 사전은 데이터베이스 관리 권한을 가진 사용자만 조회할 수 있는 테이블로서 SCOTT 계정으로는 조회가 불가능하다.

- SCOTT 계정을 DBA_접두어 사용하기
SELECT * FROM DBA_TABLES;

DBA_TABLES는 분명 오라클 데이터베이스에 존재하지만 사용 권한이 없는 SCOTT 계정으로 조회하면 테이블이 존재하지 않는다는 오류 메시지가 나온다.
이는 사용 권한이 없는 사용자는 해당 객체의 존재 여부조차 확인할 수 없음을 뜻한다.

** DBA_USERS로 사용자 정보 살펴보기
오라클 데이터베이스에 등록된 사용자 정보는 DBA_USERS에 있다.
SCOTT 사용자 정보를 보려면 USERNAME 열을 WHERE 조건으로 지정하여 사용하면된다.
SELECT * FROM DBA_USERS WHERE USERNAME = 'SCOTT';

-- 복습 때 : GUI툴을 써볼 것 SQLDEVELOPER, toad for oracle

이처럼 DBA_접두어 붙은 데이터 사전은 오라클 데이터베이스 운영과 관련된 여러 정보를 보관한다. 데이터베이스 자체를 관리하는 목적 외에 오라클 데이터베이스를 사용하여 데이터를 보관하고 관리하는 업무를 진행할 때는 자주 사용하지 않는다.

** 인덱스란?
색인이라는 뜻의 인덱스는 책 내용을 찾는 것과 마찬가지로 오라클 데이터베이스에서 데이터 검색 성능의 향상을 위해 테이블 열에 사용하는 객체를 뜻한다. 테이블에 보관된 특정 열 데이터의 주소, 즉 위치 정보를 책 페이지처럼 목록으로 만들어 놓은 것이다. 인덱스 테이블 열을 여러 가지 분석을 통해 선정하여 설정할 수 있다.

인덱스 사용 여부에 따라 데이터 검색 방식을 Table Full Scan, Index Scan 으로 구분한다.
테이블 데이터를 처음부터 끝까지 검색하여 원하는 데이터를 찾는 방식은 Table Full Scan, 
인덱스를 통해 데이터를 찾는 방식은 Index Scan이라고 한다.

인덱스도 오라클 데이터베이스 객체이므로 소유 사용자 사용 권한이 존재한다. scott 계정으로 접속하여 현재 scott 소유의 인덱스 정보를 열람할 때
user_indexes, user_ind_columns와 같은 데이터 사전을 사용한다.

-> scott 계정이 소유한 인덱스 정보 알아보기
select
index_name, index_type, table_owner, table_name
from user_indexes
where table_owner = 'SCOTT';

-> scott 계정이 소유한 인덱스 컬럼 정보 알아보기(scott 계정일 때)
select * from user_ind_columns;

인덱스는 사용자가 직접 특정 테이블의 열에 지정할 수도 있지만 열이 기본키 또는 고유키일 경우에 자동으로 생성된다.

- 인덱스 생성
오라클 데이터베이스에서 자동으로 생성해 주는 인덱스 외에 사용자가 직접 인덱스를 만들 때는 create문을 사용한다.
모양 : 
create index 인덱스 이름
on 테이블 이름 (
	열 이름1 asc or desc,
	열 이름2 asc or desc,
	...
);

-> emp테이블의 sal열에 인덱스 생성
CREATE INDEX idx_emp_sal ON EMP(sal);

-> 생성된 인덱스 조회
SELECT * FROM USER_IND_COLUMNS;

인덱스기 걸린 SAL열을 WHERE의 검색 조건으로 하여 EMP테이블을 조회하면 출력 속도가 빨라질 것이다.
하지만 인덱스를 지정할 열을 선정하는 데이터의 구조 및 데이터의 분포도 등 여러 조건을 고려해서 이러어져야 한다.
인덱스를 지정하면 데이터 조회를 반드시 빠르게 한다고 보장하기는 어렵다.
 
단일 인덱스
CREATE INDEX IDX_NAME ON EMP(SAL);

복합, 결합 인덱스
CREATE INDEX IDX_NAME ON EMP(SAL, ENAM,...);

고유 인덱스
CREATE UNIQUE IDX_NAME ON EMP(EMPNO);

함수 기반 인덱스
CREATE INDEX IDX_NAME ON EMP(SAL * 12 + COMM);

비트맵 인덱스 : 데이터 종류가 적고 같은 데이터가 많이 존재할 때 주로 사용
CREATE BITMAP INDEX IDX_NAME ON EMP(JOB)

** 인덱스 삭제
모양 : DROP INDEX 인덱스 이름;
DROP INDEX 인덱스 이름;
DROP INDEX IDX_EMP_SAL;

인덱스는 데이터 접근 및 검색 속도 향상을 위해 사용하는 객체이지만 인덱스 생성이 항상 좋은 결과로 이어지지 않는다..
인덱스는 데이터 종류, 분포도, 조회하는 SQL의 구성, 데이터 조작 관련 SQL문의 작업 빈도, 검색 결과가 전체 데이터에서 차지하는 비중 등 많은 요소를 고려하여 생성한다. - SQL 튜닝 서적을 공부해볼 것.























