[조인]
관계형데이터베이스는 여러 종류의 데이터가 다양한 테이블에 나뉘어 저장되는 특성이 있다.
그래서 응용 프로그램이나 업무에 사용하는 SQL문은 대부분 단일 테이블의 조회보다 여러 테이블의 데이터를 조합하여 출력하는 경우가 많다.
이를 가능하게 해 주는 조회 방식이 바로 조인이다.

- 여러 테이블

SELECT *
FROM 테이블1, 테이블2, 테이블3, ..., 테이블N

SELECT COUNT(*) FROM EMP;
SELECT COUNT(*) FROM DEPT;

SELECT COUNT(*) 
FROM EMP, DEPT
ORDER BY EMPNO;
-> 각 테이블을 구성하는 행이 모든 경우의 수로 조합되어 출력된다.
문제점 : 모든 행을 조합하기 때문에 사원 데이터와 부서 데이터가 정확히 맞아 떨어지지 않는 데이터도 함께 출력된다.

- 조인을 사용한 데이터 출력은 조인 대상 테이블이 많을수록 조합 데이터 중 정확한 데이터만을 뽑아내기 위해 많은 고민을 해야한다.

SELECT COUNT(*)
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY EMPNO;

SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY EMPNO;

- 별칭
SELECT *
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY EMPNO;

SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

[조인 종류]
** 내부 조인(INNER JOIN) : 조인 조건에 해당하는 데이터가 존재할 경우에만 출력
- 등가 조인 : 테이블을 연결한 후에 출력 행을 각 테이블의 특정 열에 일치한 데이터를 기준으로 선정하는 방식이다.
SELECT EMPNO, ENAME, DNAME, LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

// ERROR
SELECT EMPNO, ENAME, DNAME, LOC, DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT E.EMPNO, E.ENAME, D.DNAME, D.LOC, D.DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT E.EMPNO, E.ENAME, D.DNAME, D.LOC, D.DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT E.EMPNO, E.ENAME, D.DNAME, D.LOC, D.DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND E.SAL >= 3000;

- 비등가 조인 : 등가 조인 방식 외의 방식 외의 방식을 의미한다.
SELECT *
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

- 자체 조인 : 하나의 테이블을 여러 개의 테이블처럼 활용하여 조인하는 방식.
SELECT 
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;

**외부조인(OUTER JOIN) : 조인 조건 데이터 중 어느 한쪽이 NULL임에도 결과를 출력할 때 포함시켜 출력.
- LEFT OUTER JOIN
SELECT
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO(+)
ORDER BY E1.EMPNO;

- RIGHT OUTER JOIN
SELECT
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1, EMP E2
WHERE E1.MGR(+) = E2.EMPNO
ORDER BY E1.EMPNO;

[조인-표준문법]
[NATURAL JOIN : 등가 조인을 대신해 사용할 수 있는 조인 방식]
SELECT
E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E NATURAL JOIN DEPT D
ORDER BY DEPTNO, E.ENAME;

// ERROR
SELECT
E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E NATURAL JOIN DEPT D
ORDER BY DEPTNO, E.ENAME;
-> EMP 테이블과 DEPT 테이블은 공통 열 DEPTNO를 가지고 있으므로 NATURAL JOIN을 사용할 때
자동으로 DEPTNO 열을 기준으로 등가 조인이된다. 기존 등가 조인과 다르게 테이블을 지정해주면 안된다.

[JOIN ~ USING (조인에 사용한 기준열) : 기존 등가 조인을 대신하는 조인 방식이다.]
SELECT
E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E JOIN DEPT D USING (DEPTNO)
WHERE SAL >= 3000
ORDER BY DEPTNO, E.EMPNO;

- JOIN ~ ON
SELECT
E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, E.DEPTNO,
D.DNAME, D.LOC
FROM EMP E  JOIN DEPT D ON (E.DEPTNO = D.DEPTNO)
WHERE SAL <= 3000
ORDER BY E.DEPTNO, EMPNO;

[OUTER JOIN] 
- LEFT OUTER JOIN
SELECT 
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1 LEFT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO;

- RIGHT OUTER JOIN
SELECT 
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1 RIGHT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO, MGR_EMPNO;

- FULL OUTER JOIN
SELECT
E1.EMPNO, E1.ENAME, E1.MGR,
E2.EMPNO AS MGR_EMPNO,
E2.ENAME AS MGR_ENAME
FROM EMP E1 FULL OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
ORDER BY E1.EMPNO;

실습) JOIN~USING 키워드를 사용할 것
급여가 3000 이상이며, 직속상관이 반드시 있도록 출력
SELECT
E.EMPNO, E.ENAME, DEPTNO, D.DNAME
FROM EMP E JOIN DEPT D USING(DEPTNO)
WHERE E.SAL >= 3000
AND E.MGR IS NOT NULL
ORDER BY E.EMPNO;

[연습문제]
1. 급여가 1000이상인 사원들의 부서별 평균 급여를 출력하시오. 단, 부서별 평균 급여가 2000 이상인 부서만 출력하시오.. 
SELECT
DEPTNO, AVG(SAL)
FROM EMP 
WHERE SAL >= 1000
GROUP BY DEPTNO
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO; 

2. 각 부서별 같은업무(JOB)를 하는 사람의 인원수를 구해서
부서번호, 업무(JOB), 인원수를 부서번호에 대해 오름차순 정렬하여 출력하시오. 
SELECT
DEPTNO, JOB, COUNT(*)
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO ASC;

3. 사원번호, 부서번호, 부서명을 출력하시오.
단, 사원이 근무하지 않는 부서명도 같이 출력할 것.
SELECT
 E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO;
-> 표준으로 출력...
SELECT
 E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME
FROM EMP E RIGHT OUTER JOIN DEPT D
ON(E.DEPTNO = D.DEPTNO);

4. 10번 부서에 대해 급여의 평균값, 최대/최소 값 인원수를 구하여 출력하시오.
SELECT AVG(SAL), MAX(SAL), MIN(SAL), COUNT(*)
FROM EMP 
WHERE DEPTNO = 10;

5. EMP 와 DEPT테이블을 조인하여 모든 사원에 대해
부서번호, 부서이름, 사원이름, 급여를 출력하시오.
SELECT 
E.DEPTNO, D.DNAME, E.ENAME, E.SAL
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

6. 이름이 'ALLEN'인 사원의 부서이름을 출력하시오.
SELECT
D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;











